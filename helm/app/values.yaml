# Default values for app.
# This is a YAML-formatted file.

app: "app"
version: "1.0.0"
environment: "dev"


deployment:
  replicas: 2
  annotations:
    prometheus.io/scrape: "true"
  securityContext:
    runAsUser: 1000
    runAsGroup: 3000
    fsGroup: 2000
  containers: { }
  #    app:
  #      image: "docker.io/nginx:latest"
  #      resources:
  #        requests:
  #          memory: "64Mi"
  #          cpu: "0.01"
  #        limits:
  #          memory: "128Mi"
  #          cpu: "0.5"
  #      ports:
  #        - name: http
  #          externalPort: 80
  #          containerPort: 8080
  #          protocol: TCP
  #      env:
  #        SPECIFIC_CONTAINER_ENV: FOO
  initContainers: { }
  #    migration:
  #      image: "registry.digitalocean.com/balm/customer-api:prod"
  #      command: [ "./migrate" ]
  #      args: [ "up" ]
  #      env:
  #        SPECIFIC_CONTAINER_ENV: FOO
  #      resources: { }
  ##        requests:
  ##          memory: "64Mi"
  ##          cpu: "0.01"
  ##        limits:
  ##          memory: "128Mi"
  ##          cpu: "0.5"
  #      volumeMounts: [ ]
  #      livenessProbe: { }
  #      readinessProbe: { }

  #  Environment specific values, used for all containers
  environments:
    #  CI_DEPLOY_COMPONENTS - list of components to deploy
    CI_DEPLOY_COMPONENTS: Ingress,Service
    COMMON_CONTAINERS_ENV: FOO

image:
  registry:
    pullPolicy: Always
    imagePullSecretName: "registry-balm"

# Additional volumes on the output Deployment definition.
volumes: [ ]
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false


http:
  domain: "balm.rentals"

  #  see default values in defaults section for ingressClassName and annotations
  #  ingressClassName: "nginx"
  #  annotations: {}


  # By default host for ingress will be formed depending on Values.environment
  # - For prod: api.balm.rentals
  # - For any other environment: api.<Values.environment>.balm.rentals
  hosts: { }
#    - host: api
#      tls:
#        enabled: true
#        secretName: letsencrypt-nginx
#      paths:
#        - path: /
#          pathType: Prefix

podApp:
  replicas: 2
  annotations:
    prometheus.io/scrape: "true"
  securityContext:
    runAsUser: 1000
    runAsGroup: 3000
    fsGroup: 2000
  containers: { }
  #    app:
  #      image: "docker.io/nginx:latest"
  #      resources:
  #        requests:
  #          memory: "64Mi"
  #          cpu: "0.01"
  #        limits:
  #          memory: "128Mi"
  #          cpu: "0.5"
  #      ports:
  #        - name: http
  #          externalPort: 80
  #          containerPort: 8080
  #          protocol: TCP
  #      env:
  #        SPECIFIC_CONTAINER_ENV: FOO
  initContainers: { }
#    migration:
#      image: "registry.digitalocean.com/balm/customer-api:prod"
#      command: [ "./migrate" ]
#      args: [ "up" ]
#      env:
#        SPECIFIC_CONTAINER_ENV: FOO
#      resources: { }
##        requests:
##          memory: "64Mi"
##          cpu: "0.01"
##        limits:
##          memory: "128Mi"
##          cpu: "0.5"
#      volumeMounts: [ ]
#      livenessProbe: { }
#      readinessProbe: { }

#  Environment specific values, used for all containers
environments:
  #  CI_DEPLOY_COMPONENTS - list of components to deploy
  CI_DEPLOY_COMPONENTS: Ingress,Service
  COMMON_CONTAINERS_ENV: FOO

# Defaults for all containers
defaults:
  container:
    resources: { }
    env: { }
    preStopHook:
      enabled: true
      type: exec
      customHook: { }

  http:
    ingressClassName: "nginx"
    annotations:
      cert-manager.io/issuer: letsencrypt-nginx

  #  Defaults nodeSelector for all pods
  nodeSelector: { }

  #  Defaults tolerations for all pods
  tolerations: [ ]

  #  Defaults affinity for all pods
  affinity: { }
